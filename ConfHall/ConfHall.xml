<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConfHall</name>
    </assembly>
    <members>
        <member name="T:ConfHall.Controllers.AccountController">
            <summary>
            This class is used as an api for the search requests.
            </summary>
        </member>
        <member name="M:ConfHall.Controllers.AccountController.#ctor(ConfHall.Domain.Services.IAccountService,ConfHall.Domain.Services.IUserService)">
            <summary>
            
            </summary>
            <param name="accountsService"></param>
            <param name="userService"></param>
        </member>
        <member name="M:ConfHall.Controllers.AccountController.Post(ConfHall.Model.AccountModel)">
            <summary>
            Login endpoint
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.AccountController.Post(ConfHall.Model.UserModel)">
            <summary>
            Register endpoint
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.AccountController.Put(ConfHall.Model.UserModel)">
            <summary>
            Update endpoint
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.AccountController.Get(System.Guid)">
            <summary>
            Get User endpoint
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.AccountController.Logout">
            <summary>
            LogOut Endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Controllers.CustomerController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Controllers.CustomerController.#ctor(ConfHall.Services.ICustomerService)">
            <summary>
            
            </summary>
            <param name="customerService"></param>
        </member>
        <member name="M:ConfHall.Controllers.CustomerController.Get">
            <summary>
            Get all Customer records.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ConfHall.Controllers.CustomerController.Get(System.Guid)">
            <summary>
            Return Customer by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.CustomerController.Post(ConfHall.Models.CustomerModel)">
            <summary>
            Create Customer
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.CustomerController.Put(ConfHall.Models.CustomerModel)">
            <summary>
            Update Customer.
            </summary>
            <param name="model">Customer model</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ConfHall.Controllers.CustomerController.Delete(System.Guid)">
            <summary>
            Delete a Customer by Id
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ConfHall.Controllers.HallController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Controllers.HallController.#ctor(ConfHall.Services.IHallService)">
            <summary>
            
            </summary>
            <param name="hallService"></param>
        </member>
        <member name="M:ConfHall.Controllers.HallController.Get">
            <summary>
            Get all Hall records.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ConfHall.Controllers.HallController.Get(System.Guid)">
            <summary>
            Return Hall by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.HallController.Post(ConfHall.Models.HallModel)">
            <summary>
            Create Hall
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.HallController.Put(ConfHall.Models.HallModel)">
            <summary>
            Update Hall.
            </summary>
            <param name="model">Hall model</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ConfHall.Controllers.HallController.Delete(System.Guid)">
            <summary>
            Delete a Hall by Id
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ConfHall.Controllers.ReservationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.#ctor(ConfHall.Services.IReservationService)">
            <summary>
            
            </summary>
            <param name="reservationService"></param>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.Get">
            <summary>
            Get all Reservation records.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.Get(System.Guid)">
            <summary>
            Return Reservation by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.Post(ConfHall.Models.ReservationModel)">
            <summary>
            Create Reservation
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.Put(ConfHall.Models.ReservationModel)">
            <summary>
            Update Reservation.
            </summary>
            <param name="model">Reservation model</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.Delete(System.Guid)">
            <summary>
            Delete a Reservation by Id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.Top(System.Guid)">
            <summary>
            Get last 10 Reservation records from given Customer Id
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.GetUnconfirmed">
            <summary>
            Get all unconfirmed reservations
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.GetPendingPayment">
            <summary>
            Get all pending payment reservations
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.Confirm(System.Guid)">
            <summary>
            Confirm a reservation
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Controllers.ReservationController.Pay(System.Guid)">
            <summary>
            Confirm a reservation
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Data.ConfHallDBContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Data.ConfHallDBContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{ConfHall.Domain.Data.ConfHallDBContext},Microsoft.AspNetCore.Identity.IPasswordHasher{ConfHall.Domain.Entities.User})">
            <summary>
            
            </summary>
            <param name="options"></param>
            <param name="hashingService"></param>
        </member>
        <member name="M:ConfHall.Domain.Data.ConfHallDBContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="P:ConfHall.Domain.Data.ConfHallDBContext.Customer">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Data.ConfHallDBContext.Hall">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Data.ConfHallDBContext.Reservation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Data.ConfHallDBContext.HallFeature">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Data.ModelBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Data.ModelBuilderExtensions.Seed(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.AspNetCore.Identity.IPasswordHasher{ConfHall.Domain.Entities.User})">
            <summary>
            
            </summary>
            <param name="modelBuilder"></param>
            <param name="hashingService"></param>
        </member>
        <member name="T:ConfHall.Domain.Entities.AuditableEntity`1">
            <summary>
            
            </summary>
            <typeparam name="Tkey"></typeparam>
        </member>
        <member name="M:ConfHall.Domain.Entities.AuditableEntity`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.AuditableEntity`1.CreatedAt">
            <summary>
            Gets or sets the date on which object was created.
            </summary>
            <value>The creation date.</value>
        </member>
        <member name="P:ConfHall.Domain.Entities.AuditableEntity`1.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:ConfHall.Domain.Entities.AuditableEntity`1.UpdatedAt">
            <summary>
            Gets or sets the updated at.
            </summary>
            <value>
            The updated at.
            </value>
        </member>
        <member name="P:ConfHall.Domain.Entities.AuditableEntity`1.UpdatedBy">
            <summary>
            Gets or sets the updated by.
            </summary>
            <value>
            The updated by.
            </value>
        </member>
        <member name="T:ConfHall.Domain.Entities.BaseEntity`1">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ConfHall.Domain.Entities.BaseEntity`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.BaseEntity`1.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Entities.Customer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Entities.Customer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Customer.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Customer.IdNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Customer.Balance">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Customer.PhoneNumber">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Entities.Feature">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Entities.Feature.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Feature.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Entities.Hall">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Entities.Hall.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Hall.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Hall.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Hall.HallType">
            <summary>
            Possible values: Outdoors, EmptyRoom, FurnishedRoom
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Hall.PricePerHour">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Entities.HallFeature">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.HallFeature.Hall">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.HallFeature.Feature">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.HallFeature.HallId">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.HallFeature.FeatureId">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Entities.Reservation">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Entities.Reservation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Reservation.Hall">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Reservation.Customer">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Reservation.From">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Reservation.To">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Reservation.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Reservation.IsPaid">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.Reservation.IsConfirmed">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Entities.Role">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Entities.Role.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Entities.User">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Entities.User.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.User.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.User.FirstName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Entities.User.LastName">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Mapper.ConfigureAutoMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Mapper.ConfigureAutoMapper.Now">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Repositories.CustomerRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Repositories.CustomerRepository.#ctor(ConfHall.Domain.Data.ConfHallDBContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ConfHall.Domain.Repositories.CustomerRepository.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.CustomerRepository.Get(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.CustomerRepository.Insert(ConfHall.Domain.Entities.Customer)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.CustomerRepository.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.CustomerRepository.Update(ConfHall.Domain.Entities.Customer)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Repositories.HallRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Repositories.HallRepository.#ctor(ConfHall.Domain.Data.ConfHallDBContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ConfHall.Domain.Repositories.HallRepository.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.HallRepository.Get(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.HallRepository.GetFeatures(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.HallRepository.Insert(ConfHall.Domain.Entities.Hall)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.HallRepository.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.HallRepository.Update(ConfHall.Domain.Entities.Hall)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Repositories.ReservationRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Repositories.ReservationRepository.#ctor(ConfHall.Domain.Data.ConfHallDBContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ConfHall.Domain.Repositories.ReservationRepository.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.ReservationRepository.Get(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.ReservationRepository.Insert(ConfHall.Domain.Entities.Reservation)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.ReservationRepository.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.ReservationRepository.Update(ConfHall.Domain.Entities.Reservation)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Repositories.UserRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Repositories.UserRepository.#ctor(ConfHall.Domain.Data.ConfHallDBContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ConfHall.Domain.Repositories.UserRepository.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.UserRepository.Get(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.UserRepository.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.UserRepository.Insert(ConfHall.Domain.Entities.User)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.UserRepository.Update(ConfHall.Domain.Entities.User)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Repositories.IAsyncRepository`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IAsyncRepository`2.Get(`1)">
            <summary>
            Gets Element by id.
            </summary>
            <param name="id">The id.</param>
            <returns>TEntity Element</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IAsyncRepository`2.GetAll">
            <summary>
            Gets All elements TEntity.
            </summary>
            <returns>IEnumerable&lt;TEntity&gt;</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IAsyncRepository`2.GetAll(System.Int32,System.Int32)">
            <summary>
            Get all notifications.
            </summary>
            <param name="pageSize">Page Size</param>
            <param name="pageIndex">Page Index</param>
            <returns>Notification list</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IAsyncRepository`2.Insert(`0)">
            <summary>
            Added TEntity Element.
            </summary>
            <param name="entity">The TEntity.</param>
            <returns>Int value</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IAsyncRepository`2.Update(`0)">
            <summary>
            Update a Element.
            </summary>
            <param name="entity">The entity.</param>
            <returns>int value</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IAsyncRepository`2.Delete(`1)">
            <summary>
            Delete a Element by id.
            </summary>
            <param name="id">The id.</param>
            <returns>Int Value</returns>
        </member>
        <member name="T:ConfHall.Domain.Repositories.ICustomerRepository">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Repositories.IHallRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IHallRepository.GetFeatures(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Repositories.IRepository`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IRepository`2.Get(`1)">
            <summary>
            Gets Element by id.
            </summary>
            <param name="id">The id.</param>
            <returns>TEntity Element</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IRepository`2.GetAll">
            <summary>
            Gets All elements TEntity.
            </summary>
            <returns>IEnumerable&lt;TEntity&gt;</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IRepository`2.Insert(`0)">
            <summary>
            Added TEntity Element.
            </summary>
            <param name="entity">The TEntity.</param>
            <returns>Int value</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IRepository`2.Update(`0)">
            <summary>
            Update a Element.
            </summary>
            <param name="entity">The entity.</param>
            <returns>int value</returns>
        </member>
        <member name="M:ConfHall.Domain.Repositories.IRepository`2.Delete(`1)">
            <summary>
            Delete a Element by id.
            </summary>
            <param name="id">The id.</param>
            <returns>Int Value</returns>
        </member>
        <member name="T:ConfHall.Domain.Repositories.IReservationRepository">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Repositories.IUserRepository">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Services.AccountService">
            <summary>
            Class AccountService all login ModelBuinisess.
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.AccountService.#ctor(Microsoft.Extensions.Configuration.IConfiguration,ConfHall.Domain.Services.IUserService,Microsoft.AspNetCore.Identity.SignInManager{ConfHall.Domain.Entities.User},Microsoft.AspNetCore.Identity.UserManager{ConfHall.Domain.Entities.User},Microsoft.Extensions.Options.IOptions{ConfHall.Models.JwtIssuerOptions})">
            <summary>
            
            </summary>
            <param name="_config"></param>
            <param name="userService"></param>
            <param name="signInManager"></param>
            <param name="_userManager"></param>
            <param name="jwtOptions"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.AccountService.LoginWithoutIdentity(ConfHall.Model.UserModel)">
            <summary>
            Validate login credencials
            </summary>
            <param name="model"></param>
            <returns>if the user exist return true. If not exist return false</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.AccountService.PasswordSignInAsync(ConfHall.Model.AccountModel,System.String)">
            <summary>
            Validate login credencials
            </summary>
            <param name="model"></param>
            <param name="remoteIpAddress"></param>
            <returns>if the user exist return true. If not exist return false</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.AccountService.SignInAsync(ConfHall.Model.AccountModel)">
            <summary>
            Validate login credencials
            </summary>
            <param name="model"></param>
            <returns>if the user exist return true. If not exist return false</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.AccountService.Logout">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.AccountService.AddUserToRoleAsync(ConfHall.Domain.Entities.User,System.String)">
            <summary>
            Add user to a role if the user exists, otherwise, create the user and adds him to the role.
            </summary>
            <param name="User">User entity</param>
            <param name="roleName">Role Name</param>
        </member>
        <member name="M:ConfHall.Domain.Services.AccountService.RemoveUserFromRoleAsync(ConfHall.Domain.Entities.User,System.String)">
            <summary>
            Add user to a role if the user exists, otherwise, create the user and adds him to the role.
            </summary>
            <param name="User">User entity</param>
            <param name="roleName">Role Name</param>
        </member>
        <member name="M:ConfHall.Domain.Services.AccountService.ToUnixEpochDate(System.DateTime)">
            <returns>Date converted to seconds since Unix epoch (Jan 1, 1970, midnight UTC).</returns>
        </member>
        <member name="T:ConfHall.Domain.Services.CustomerService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.CustomerService.#ctor(ConfHall.Domain.Repositories.ICustomerRepository,ConfHall.Domain.Repositories.IReservationRepository,ConfHall.Domain.Repositories.IHallRepository)">
            <summary>
            
            </summary>
            <param name="customerRepository"></param>
            <param name="reservationRepository"></param>
            <param name="hallRepository"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.CustomerService.Get">
            <summary>
            Gets list all of all customers.
            </summary>
            <returns>Hall IEnumerable</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.CustomerService.Get(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.CustomerService.Add(ConfHall.Models.CustomerModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.CustomerService.Update(ConfHall.Models.CustomerModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.CustomerService.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ConfHall.Domain.Services.HallService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.HallService.#ctor(ConfHall.Domain.Repositories.IHallRepository)">
            <summary>
            
            </summary>
            <param name="hallRepository"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.HallService.Get">
            <summary>
            Gets list all of all halls.
            </summary>
            <returns>Hall IEnumerable</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.HallService.Get(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.HallService.Add(ConfHall.Models.HallModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.HallService.Update(ConfHall.Models.HallModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.HallService.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.HallService.Validate(ConfHall.Domain.Entities.Hall)">
            <summary>
            
            </summary>
            <param name="hall"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Services.HashingService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.HashingService.ValidatePassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="correctHash"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.HashingService.HashPassword(ConfHall.Domain.Entities.User,System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.HashingService.VerifyHashedPassword(ConfHall.Domain.Entities.User,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="hashedPassword"></param>
            <param name="providedPassword"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Services.ReservationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.#ctor(ConfHall.Domain.Repositories.IReservationRepository,ConfHall.Domain.Repositories.IHallRepository,ConfHall.Domain.Repositories.ICustomerRepository)">
            <summary>
            
            </summary>
            <param name="reservationRepository"></param>
            <param name="hallRepository"></param>
            <param name="customerRepository"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Get(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Add(ConfHall.Models.ReservationModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Update(ConfHall.Models.ReservationModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Top(System.Guid)">
            <summary>
            
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.GetUnconfirmed">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.GetPendingPayment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Confirm(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Pay(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.ReservationService.Validate(ConfHall.Domain.Entities.Reservation)">
            <summary>
            
            </summary>
            <param name="reservation"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Services.UserService">
            <summary>
            UserService class.
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.UserService.#ctor(ConfHall.Domain.Repositories.IUserRepository,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IPasswordHasher{ConfHall.Domain.Entities.User})">
            <summary>
            Initializes a new instance of the <see cref="T:ConfHall.Domain.Services.UserService"/> class.
            </summary>
            <param name="UserRepository">The User Repository.</param>
            <param name="hashingService"></param>
            <param name="httpContextAccessor"></param>
            
        </member>
        <member name="M:ConfHall.Domain.Services.UserService.Add(ConfHall.Model.UserModel)">
            <summary>
            Sets a Campaign by UserModel.
            </summary>
            <param name="UserModel">The UserModel.</param>
            <returns>The id of the User</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.UserService.Get">
            <summary>
            Gets all countries.
            </summary>
            <param></param>
            <returns>IEnumerable User</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.UserService.Get(System.Guid)">
            <summary>
            Gets a User by id.
            </summary>
            <param name="id">The id.</param>
            <returns>User model</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.UserService.Update(ConfHall.Model.UserModel)">
            <summary>
            Update a User by UserModel.
            </summary>
            <param name="UserModel">The UserModel.</param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.UserService.GetCurrentUser">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.UserService.VerifyPasswordHash(ConfHall.Domain.Entities.User,ConfHall.Model.UserModel)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="userModel"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Services.IAccountService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.IAccountService.PasswordSignInAsync(ConfHall.Model.AccountModel,System.String)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="remoteIpAddreess"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.IAccountService.Logout">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Services.IService`2">
            <summary>
            
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ConfHall.Domain.Services.IService`2.Get(`1)">
            <summary>
            Gets Element by id.
            </summary>
            <param name="id">The id.</param>
            <returns>TModel Element</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.IService`2.Get">
            <summary>
            Gets All elements TModel.
            </summary>
            <returns>IEnumerable&lt;TModel&gt;</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.IService`2.Add(`0)">
            <summary>
            Added TModel Element.
            </summary>
            <param name="model">The TModel.</param>
            <returns>TKey value</returns>
        </member>
        <member name="M:ConfHall.Domain.Services.IService`2.Update(`0)">
            <summary>
            Update a Element.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:ConfHall.Domain.Services.IService`2.Delete(`1)">
            <summary>
            Delete a Element by id.
            </summary>
            <param name="id">The id.</param>
            <returns>Tkey Value</returns>
        </member>
        <member name="T:ConfHall.Domain.Services.IUserService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Domain.Services.IUserService.Add(ConfHall.Model.UserModel)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.IUserService.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.IUserService.Get(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Domain.Services.IUserService.Update(ConfHall.Model.UserModel)">
            <summary>
            
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ConfHall.Domain.Services.IUserService.GetCurrentUser">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Domain.Model.AuditableModel`1">
            <summary>
            
            </summary>
            <typeparam name="Tkey"></typeparam>
        </member>
        <member name="M:ConfHall.Domain.Model.AuditableModel`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Model.AuditableModel`1.CreatedAt">
            <summary>
            Gets or sets the date on which object was created.
            </summary>
            <value>The creation date.</value>
        </member>
        <member name="P:ConfHall.Domain.Model.AuditableModel`1.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:ConfHall.Domain.Model.AuditableModel`1.UpdatedAt">
            <summary>
            Gets or sets the updated at.
            </summary>
            <value>
            The updated at.
            </value>
        </member>
        <member name="P:ConfHall.Domain.Model.AuditableModel`1.UpdatedBy">
            <summary>
            Gets or sets the updated by.
            </summary>
            <value>
            The updated by.
            </value>
        </member>
        <member name="T:ConfHall.Domain.Model.BaseModel`1">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ConfHall.Domain.Model.BaseModel`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Model.BaseModel`1.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Domain.Model.FilterModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Model.FilterModel.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Model.FilterModel.Operation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Domain.Model.FilterModel.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Enums.HallType">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Enums.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Model.AccountModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Model.AccountModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.AccountModel.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.AccountModel.Email">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.AccountModel.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.AccountModel.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.AccountModel.RememberMe">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.AccountModel.Expiration">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Model.RoleModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Model.RoleModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.RoleModel.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.RoleModel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Model.UserModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Model.UserModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.UserModel.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.UserModel.FirstName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.UserModel.LastName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.UserModel.Email">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.UserModel.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Model.UserModel.PasswordHash">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Models.CustomerModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.CustomerModel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.CustomerModel.IdNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.CustomerModel.Balance">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.CustomerModel.PhoneNumber">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Models.FeatureModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.FeatureModel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Models.HallModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.HallModel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.HallModel.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.HallModel.HallType">
            <summary>        
            Possible values: Outdoors, EmptyRoom, FurnishedRoom
            </summary>
        </member>
        <member name="P:ConfHall.Models.HallModel.PricePerHour">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.HallModel.Features">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Models.JwtIssuerOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.Expiration">
            <summary>
            "exp" (Expiration Time) Claim (returns IssuedAt + ValidFor)
            </summary>
            <remarks>The "exp" (expiration time) claim identifies the expiration time on
              or after which the JWT MUST NOT be accepted for processing.  The
              processing of the "exp" claim requires that the current date/time
              MUST be before the expiration date/time listed in the "exp" claim.
              Implementers MAY provide for some small leeway, usually no more than
              a few minutes, to account for clock skew.  Its value MUST be a number
              containing a NumericDate value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.IssuedAt">
            <summary>
            "iat" (Issued At) Claim (default is UTC NOW)
            </summary>
            <remarks>The "iat" (issued at) claim identifies the time at which the JWT was
              issued.  This claim can be used to determine the age of the JWT.  Its
              value MUST be a number containing a NumericDate value.  Use of this
              claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.JtiGenerator">
            <summary>
            "jti" (JWT ID) Claim (default ID is a GUID)
            </summary>
            <remarks>The "jti" (JWT ID) claim provides a unique identifier for the JWT.
              The identifier value MUST be assigned in a manner that ensures that
              there is a negligible probability that the same value will be
              accidentally assigned to a different data object; if the application
              uses multiple issuers, collisions MUST be prevented among values
              produced by different issuers as well.  The "jti" claim can be used
              to prevent the JWT from being replayed.  The "jti" value is a case-
              sensitive string.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.NotBefore">
            <summary>
            "nbf" (Not Before) Claim (default is UTC NOW)
            </summary>
            <remarks>The "nbf" (not before) claim identifies the time before which the JWT
              MUST NOT be accepted for processing.  The processing of the "nbf"
              claim requires that the current date/time MUST be after or equal to
              the not-before date/time listed in the "nbf" claim.  Implementers MAY
              provide for some small leeway, usually no more than a few minutes, to
              account for clock skew.  Its value MUST be a number containing a
              NumericDate value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.Audience">
            <summary>
            "aud" (Audience) Claim
            </summary>
            <remarks>The "aud" (audience) claim identifies the recipients that the JWT is
              intended for.  Each principal intended to process the JWT MUST
              identify itself with a value in the audience claim.  If the principal
              processing the claim does not identify itself with a value in the
              "aud" claim when this claim is present, then the JWT MUST be
              rejected.  In the general case, the "aud" value is an array of case-
              sensitive strings, each containing a StringOrURI value.  In the
              special case when the JWT has one audience, the "aud" value MAY be a
              single case-sensitive string containing a StringOrURI value.  The
              interpretation of audience values is generally application specific.
              Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.Issuer">
            <summary>
            "iss" (Issuer) Claim
            </summary>
            <remarks>The "iss" (issuer) claim identifies the principal that issued the
              JWT.  The processing of this claim is generally application specific.
              The "iss" value is a case-sensitive string containing a StringOrURI
              value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.SecretKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.SigningCredentials">
            <summary>
            The signing key to use when generating tokens.
            </summary>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.Subject">
            <summary>
            "sub" (Subject) Claim
            </summary>
            <remarks> The "sub" (subject) claim identifies the principal that is the
              subject of the JWT.  The claims in a JWT are normally statements
              about the subject.  The subject value MUST either be scoped to be
              locally unique in the context of the issuer or be globally unique.
              The processing of this claim is generally application specific.  The
              "sub" value is a case-sensitive string containing a StringOrURI
              value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ConfHall.Models.JwtIssuerOptions.ValidFor">
            <summary>
            Set the timespan the token will be valid for (default is 5 min/300 seconds)
            </summary>
        </member>
        <member name="T:ConfHall.Models.ReservationModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.ReservationModel.HallId">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.ReservationModel.CustomerId">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.ReservationModel.From">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.ReservationModel.To">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.ReservationModel.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.ReservationModel.IsPaid">
            <summary>
            
            </summary>
        </member>
        <member name="P:ConfHall.Models.ReservationModel.IsConfirmed">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ConfHall.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:ConfHall.Services.ICustomerService">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Services.IHallService">
            <summary>
            
            </summary>
        </member>
        <member name="T:ConfHall.Services.IReservationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Services.IReservationService.Top(System.Guid)">
            <summary>
            
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Services.IReservationService.GetUnconfirmed">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Services.IReservationService.GetPendingPayment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfHall.Services.IReservationService.Confirm(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ConfHall.Services.IReservationService.Pay(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ConfHall.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:ConfHall.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConfHall.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:ConfHall.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
